#!/bin/bash
set -e

# Detect installed AUR helper
AUR_HELPER=""
for helper in yay paru trizen; do
  if command -v "$helper" &>/dev/null; then
    AUR_HELPER="$helper"
    break
  fi
done

install_packages() {
  local pkgs=($1)
  local install_cmd="$2"

  to_install=()
  for pkg in "${pkgs[@]}"; do
    if ! pacman -Qq "$pkg" &>/dev/null; then
      to_install+=("$pkg")
    else
      echo "$pkg is already installed, skipping."
    fi
  done

  if [ ${#to_install[@]} -gt 0 ]; then
    eval "$install_cmd ${to_install[*]}"
  fi
}

{{- if .config.ui_environment.hyprland }}
install_packages "{{ join " " .hyprland.pacman }}" "sudo pacman -Syu --noconfirm"
{{- end }}

{{- if .config.ui_environment.hyprland }}
[ -z "$AUR_HELPER" ] && echo "No AUR helper installed." && exit 1
install_packages "{{ join " " .hyprland.aur }}" "$AUR_HELPER -S --noconfirm"
{{- end }}

{{- if .service_packages.pacman }}
install_packages "{{ join " " .service_packages.pacman }}" "sudo pacman -Syu --noconfirm"
{{- end }}

{{- if .service_packages.aur }}
[ -z "$AUR_HELPER" ] && echo "No AUR helper installed." && exit 1
install_packages "{{ join " " .service_packages.aur }}" "$AUR_HELPER -S --noconfirm"
{{- end }}

{{- if .config.qemu.enable}}
install_packages "{{ join " " .kvm_packages.pacman }}" "sudo pacman -Syu --noconfirm"
{{- end }}

{{- if .config.qemu.enable }}
[ -z "$AUR_HELPER" ] && echo "No AUR helper installed." && exit 1
install_packages "{{ join " " .kvm_packages.aur }}" "$AUR_HELPER -S --noconfirm"
{{- end }}

{{- if .config.qemu.virt_manager }}
install_packages "{{ join " " .virt_manager_packages.pacman }}" "sudo pacman -Syu --noconfirm"
{{- end }}

{{- if .config.qemu.virt_manager }}
[ -z "$AUR_HELPER" ] && echo "No AUR helper installed." && exit 1
install_packages "{{ join " " .virt_manager_packages.aur }}" "$AUR_HELPER -S --noconfirm"
{{- end }}

{{- if .packages.pacman }}
install_packages "{{ join " " .packages.pacman }}" "sudo pacman -Syu --noconfirm"
{{- end }}

{{- if .packages.aur }}
[ -z "$AUR_HELPER" ] && echo "No AUR helper installed." && exit 1
install_packages "{{ join " " .packages.aur }}" "$AUR_HELPER -S --noconfirm"
{{- end }}

{{- if .config.gaming }}
gaming_packages_to_install=()

for pkg in {{ join " " .gaming_packages.pacman }}; do
  # Skip lib32 packages if multilib is disabled
  {{- if not .config.multilib }}
  if [[ "$pkg" == lib32-* ]]; then
    echo "Skipping $pkg because multilib is disabled."
    continue
  fi
  {{- end }}

  if ! pacman -Qq "$pkg" &>/dev/null; then
    gaming_packages_to_install+=("$pkg")
  else
    echo "$pkg is already installed, skipping."
  fi
done

if [ ${#gaming_packages_to_install[@]} -gt 0 ]; then
  sudo pacman -Syu --noconfirm "${gaming_packages_to_install[@]}"
else
  echo "All gaming packages are already installed."
fi
{{- end }}

{{- if .config.gaming }}
[ -z "$AUR_HELPER" ] && echo "No AUR helper installed." && exit 1
install_packages "{{ join " " .gaming_packages.aur }}" "$AUR_HELPER -S --noconfirm"
{{- end }}

{{- if .config.school }}
install_packages "{{ join " " .school_packages.pacman }}" "sudo pacman -Syu --noconfirm"
{{- end }}

{{- if .config.school }}
[ -z "$AUR_HELPER" ] && echo "No AUR helper installed." && exit 1
install_packages "{{ join " " .school_packages.aur }}" "$AUR_HELPER -S --noconfirm"
{{- end }}
